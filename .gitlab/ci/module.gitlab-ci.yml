---
# Build
.module_build:
  stage: build
  image: docker:23.0.5
  services:
    - docker:23.0.5-dind
  variables:
    DOCKER_DRIVER: overlay2
    MODULE: ''
    BUILD_TYPE: ''
    BUILD_CONTEXT: ''
    PORT: ''
    ROOTDIR: '.'
    TAG: ${CI_COMMIT_SHORT_SHA}
  before_script:
    - apk --no-cache add make
    - apk --no-cache add git
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
  script: |
    printenv

    echo -e "\033[0;34m## Building module ${MODULE} ##\033[0m"

    # Check if module name was set
    if [ -n "${MODULE}" ]; then
      BUILD_TYPE="$(echo "${MODULE}" | sed "s|/.*||")"
      BUILD_CONTEXT="$(echo "${MODULE}" | sed "s|.*/||")"
      if [ -n "${BUILD_CONTEXT}" ]; then
        eval PORT="\$$(echo "${BUILD_CONTEXT}_PORT" | tr "[:lower:]" "[:upper:]")"
      else
        echo "[ERROR] Error building MODULE variables."
        exit 1
      fi
    fi

    if [ -n "${TAG}" ]; then
    # Build
    make docker-build

    # clean this up to push image on production commit only
      image_tag="${CI_REGISTRY_IMAGE}/${BUILD_CONTEXT}:${TAG}"

      # tag
      docker tag "${CI_REGISTRY_USER}/${BUILD_CONTEXT}:${TAG}" "${image_tag}"

      # merge request
      if [ "${TAG}" == "${CI_MERGE_REQUEST_IID}" ]; then
        mr_tag="${CI_REGISTRY_IMAGE}/${BUILD_CONTEXT}:mr_${TAG}"
        docker tag "${image_tag}" "${mr_tag}"
        echo -e "\033[0;34m## Pushing ${mr_tag} ##\033[0m"
        docker push "${mr_tag}"
      fi
      
      if [ "${TAG}" == "${CI_COMMIT_SHORT_SHA}" ]; then
        # Push commit tag
        echo -e "\033[0;34m## Pushing ${image_tag} ##\033[0m"
        docker push "${image_tag}"

        # Latest
        latest_tag="${CI_REGISTRY_IMAGE}/${BUILD_CONTEXT}:latest"
        docker tag "${image_tag}" "${latest_tag}"
        echo -e "\033[0;34m## Pushing ${latest_tag} ##\033[0m"
        docker push "${latest_tag}"
      fi
    else
      echo "[ERROR] No tag is available. Image was not pushed to registry."
    fi

# Deploy
.module_deploy:
  stage: deploy
  cache: []
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  variables:
    MODULE: ''
    ROOTDIR: '.'
    BUILD_CONTEXT: ''
    TAG: "${CI_COMMIT_SHORT_SHA}"
  script: |
    kubectl config get-contexts
    kubectl config use-context gras1/cannabis-platform-monorepo:gras-cluster
    cd "${ROOTDIR}/k8s/"

    BUILD_CONTEXT="$(echo "${MODULE}" | sed "s|.*/||")"

    # kubectl apply -f "service.${BUILD_CONTEXT}.yaml"
    sed -e "s|TAG|$TAG|g" "service.${BUILD_CONTEXT}.yaml" | kubectl apply -f -
    kubectl get pods