import { selectSelectedLocationState, selectShopState, selectUserState } from '@cd/core-lib/src/reduxDir';
import { Carousel, Center, Grid, H3, Page } from '@cd/ui-lib';
import Head from 'next/head';
import { useSelector } from 'react-redux';
import { DispensaryCard } from '../components';

export default function MarketPlace({ host }: { host: string}) {

    const { dispensaries, isLoading, isError, isSuccess } = useSelector(selectShopState)
    const selectedLocation = useSelector(selectSelectedLocationState);

    const { user } = useSelector(selectUserState)
    
    return (
        <Page>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <H3 className='px-4'>Good day{user.firstName && `, ${ user.firstName}`}!</H3>
            <Grid className="space-y-5">
                { isError && <Center className='m-auto grow border'>
                    There's a problem loading your Gras shop. Please contact support for help.</Center>}
                    
                {/* { !isLoading && isSuccess &&  */}
                { <Carousel 
                    title={`Dispensaries Near You ( ${selectedLocation?.address?.city} )`} 
                    Component={DispensaryCard}
                    loading={isLoading}
                    data={dispensaries}
                    dataKey='dispensary'
                    slidesPresented={3}
                    /> }
                {/* <CategoriesSelector /> */}
                {/* BUILD THIS OUT, AND ADD BACK IN ^ */}
            </Grid>
            {/* HELP TEXT V USE IT IN A TUTORIAL VIEW */}
            {/* <Paragraph>
                This page is the main shopping view. It displays a list of products and allows the user to add them to
                the cart. It also display list of nearby dispensaries and lets the user enter their storefront to view
                merchandise and content.
            </Paragraph> */}
        </Page>
    );
}

// export async function getServerSideProps({ req, res }: any) {
//     try {
//         return {
//             props: {
//                 host: req.headers.host
//             }
//         };
//     } catch (error: any) {
//         console.log('SSR error marketplace place: ', error.message);
//         if (error.type === Session.Error.TRY_REFRESH_TOKEN) {
//             return { props: { fromSupertokens: 'needs-refresh' } };
//         } else if (error.type === Session.Error.UNAUTHORISED) {
//             console.log('unauthorized error: ', error);
//             return res.status(200).json({ status: false, error });
//         } else return { notFound: true };
//     }
// }
