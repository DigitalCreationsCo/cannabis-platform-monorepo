import * as yup from 'yup';

const fs = require('fs');
const path = require('path');

const SNIPPET_NAME = 'FormikFormComponent';
const SNIPPET_PREFIX = 'react-formik';

const COMPONENT_NAME = SNIPPET_NAME;

const snippetContent = {
	SNIPPET_NAME: {
		scope: 'javascript,typescript',
		prefix: SNIPPET_PREFIX,
		body: ["console.log('${1:Hello}, ${2:world}!');"],
		description: 'Dynamic snippet generated by script',
	},
};

const snippetFilePath = `./.vscode/${SNIPPET_NAME}.code-snippets`;

// Ensure the directory exists before writing the file
const snippetDir = path.dirname(snippetFilePath);
if (!fs.existsSync(snippetDir)) {
	fs.mkdirSync(snippetDir, { recursive: true });
}

fs.writeFileSync(snippetFilePath, JSON.stringify(snippetContent, null, 2));

console.log(`Snippet file "${snippetFilePath}" generated successfully.`);

type SNIPPETBODY = {
	scope: string;
	prefix: string;
	body: string[];
	description: string;
};

type GenerateInitialValues<T> =
	T extends Record<string, infer U>
		? {
				[K in keyof T]: U extends string | number | boolean | (infer R)[]
					? U extends string
						? ''
						: U extends number
							? 0
							: U extends boolean
								? false
								: R extends Record<string, any>
									? GenerateInitialValues<R> // Recursive call for nested objects
									: GenerateInitialValues<R>[] // Recursive call for arrays
					: never;
			}
		: never;

type RecursiveGenerateInitialValues<T> =
	T extends Record<string, any> ? GenerateInitialValues<T> : never;

function generateInitialValues<T>(): GenerateInitialValues<T> {
	const initialValues = {} as GenerateInitialValues<T>;

	for (const key in initialValues) {
		if (initialValues.hasOwnProperty(key)) {
			initialValues[key] =
				typeof initialValues[key] === 'number'
					? 0
					: typeof initialValues[key] === 'boolean'
						? false
						: Array.isArray(initialValues[key])
							? (initialValues[key] as any).map(() =>
									generateInitialValues<(typeof initialValues)[key][0]>()
								)
							: typeof initialValues[key] === 'object'
								? generateInitialValues<(typeof initialValues)[typeof key]>()
								: ('' as GenerateInitialValues<T>[keyof T]);
		}
	}

	return initialValues;
}

const schemaVar = `${toCamelCase(SNIPPET_NAME)}ValidationSchema`;
function composeSnippet<T extends Record<string, any>>(): Record<
	string,
	SNIPPETBODY
> {
	return {
		SNIPPET_NAME: {
			description: 'Formik + Yup validated React form component',
			scope: 'javascript,typescript',
			prefix: SNIPPET_PREFIX,
			body: [
				'import {',
				'\tis_legal_ageAndVerified,',
				'\tTextContent,',
				'\tuserActions,',
				'\ttype ConsumeCodeResponse,',
				"} from '@cd/core-lib';",
				"import { type UserWithDetails } from '@cd/data-access';",
				"import { useFormik } from 'formik';",
				"import { useEffect, useState } from 'react';",
				"import { useCookies } from 'react-cookie';",
				"import { toast } from 'react-hot-toast';",
				"import { useDispatch } from 'react-redux';",
				'import {',
				'\tconsumeCode,',
				'\tresendCode,',
				"} from 'supertokens-auth-react/recipe/passwordless';",
				"import * as yup from 'yup';",
				"import Icons from '../../../icons';",
				"import Button from '../../button/Button/Button';",
				"import FlexBox from '../../FlexBox';",
				"import Grid from '../../Grid';",
				"import IconWrapper from '../../IconWrapper';",
				"import TextField from '../../TextField/TextField';",
				"import { Paragraph } from '../../Typography';",
				"import { type LoginFormComponentProps } from './LoginModal';",
				'',
				'export default function EnterOTPForm({',
				'\tprevFormStep,',
				'\tinputValue,',
				'\tdispatchCloseModal,',
				'}: LoginFormComponentProps) {',
				"\tconst [, setCookie] = useCookies(['is_legal_age']);",
				'\tconst [loadingButton, setLoadingButton] = useState(false);',
				'',
				'\tconst dispatch = useDispatch();',
				'',
				`\tconst initialValues = ${JSON.stringify(generateInitialValues<T>())};`,
				'',
				'\tconst {',
				'\t\tvalues,',
				'\t\terrors,',
				'\t\ttouched,',
				'\t\thandleBlur,',
				'\t\thandleChange,',
				'\t\thandleSubmit,',
				'\t\tvalidateForm,',
				'\t} = useFormik({',
				'\t\tinitialValues,',
				'\t\tonSubmit,',
				`\t\tvalidationSchema: ${schemaVar},`,
				'\t});',
				'',
				'\t// eslint-disable-next-line sonarjs/no-identical-functions',
				'\tfunction notifyValidation() {',
				'\t\tvalidateForm().then((errors) => {',
				'\t\t\tif (Object.values(errors).length > 0) {',
				"\t\t\t\tconsole.info('validation errors: ', errors);",
				'\t\t\t\ttoast.error(Object.values(errors)[0].toString());',
				'\t\t\t}',
				'\t\t});',
				'\t}',
				'',
				'\tasync function onSubmit() {',
				'\t\ttry {',
				'\t\t\tif (!loadingButton) {',
				'\t\t\t\tsetLoadingButton(true);',
				'\t\t\t\t // handle submit',
				'\t\t\t}',
				'\t\t} catch (error: any) {',
				'\t\t\tsetLoadingButton(false);',
				'\t\t\tconsole.error(error);',
				'\t\t\ttoast.error(error.message);',
				'\t\t}',
				'\t}',
				'',
				'\treturn (',
				'\t\t<form>',
				'\t\t\t<Grid className="relative space-y-2 md:w-2/3 m-auto">',
				'\t\t\t\t<Paragraph>A one time passcode was sent to {inputValue}.</Paragraph>',
				'\t\t\t\t<TextField',
				'\t\t\t\t\tcontainerClassName="m-auto lg:flex-col lg:items-start"',
				'\t\t\t\t\tclassName="my-2 border text-center"',
				'\t\t\t\t\tautoComplete="off"',
				'\t\t\t\t\ttype="text"',
				'\t\t\t\t\tname="passcode"',
				'\t\t\t\t\tlabel="passcode"',
				'\t\t\t\t\tplaceholder=""',
				'\t\t\t\t\tvalue={values?.passcode}',
				'\t\t\t\t\tonBlur={handleBlur}',
				'\t\t\t\t\tonChange={handleChange}',
				'\t\t\t\t\terror={!!touched.passcode && !!errors.passcode}',
				'\t\t\t\t/>',
				'\t\t\t\t<FlexBox className="py-2 space-y-8">',
				'\t\t\t\t\t<Button',
				'\t\t\t\t\t\ttype="submit"',
				'\t\t\t\t\t\tclassName="place-self-center"',
				'\t\t\t\t\t\tloading={loadingButton}',
				'\t\t\t\t\t\tonClick={(e) => {',
				'\t\t\t\t\t\t\te.preventDefault();',
				'\t\t\t\t\t\t\te.stopPropagation();',
				'\t\t\t\t\t\t\tnotifyValidation();',
				'\t\t\t\t\t\t\thandleSubmit();',
				'\t\t\t\t\t\t}}',
				'\t\t\t\t\t>',
				'\t\t\t\t\t\tSign In',
				'\t\t\t\t\t</Button>',
				'',
				'\t\t\t\t\t<FlexBox className="m-auto space-y-2">',
				'\t\t\t\t\t\t<Button',
				'\t\t\t\t\t\t\tclassName="underline"',
				'\t\t\t\t\t\t\ttransparent',
				'\t\t\t\t\t\t\tonClick={resendOTP}',
				'\t\t\t\t\t\t\tdisabled={!canSend}',
				'\t\t\t\t\t\t>',
				'\t\t\t\t\t\t\tResend Code',
				'\t\t\t\t\t\t</Button>',
				'',
				'\t\t\t\t\t\t<Button',
				'\t\t\t\t\t\t\tclassName="underline"',
				"\t\t\t\t\t\t\tbg={'transparent'}",
				"\t\t\t\t\t\t\thover={'transparent'}",
				'\t\t\t\t\t\t\tonClick={prevFormStep}',
				'\t\t\t\t\t\t>',
				'\t\t\t\t\t\t\t<IconWrapper Icon={null} className="text-dark pr-2" />',
				'\t\t\t\t\t\t\tChange email',
				'\t\t\t\t\t\t</Button>',
				'\t\t\t\t\t</FlexBox>',
				'\t\t\t\t</FlexBox>',
				'\t\t\t</Grid>',
				'\t\t</form>',
				'\t);',
				'}',
				'',
				`const ${schemaVar} = ${generateYupSchema<T>()};`,
				'',
			],
		},
	};
}

// function generateYupSchema<T>() {
//     type InputType = { title: string; name: string; price: number; isExpired?: boolean };

function generateYupSchema<
	T extends Record<string, any>,
>(): yup.ObjectSchema<T> {
	const schemaObject: Record<string, yup.SchemaOf<T>> = {};

	for (const key in typeof T) {
		if (Object.prototype.hasOwnProperty.call(schemaObject, key)) {
			type value = T[key];

			switch (typeof value) {
				case 'string':
					schemaObject[key] = yup.string().required();
					break;
				case 'number':
					schemaObject[key] = yup.number().required();
					break;
				case 'boolean':
					schemaObject[key] = yup.boolean();
					break;
				default:
					// Handle other types as needed
					break;
			}
		}
	}

	return yup.object().shape(schemaObject);
}

// Example usage
// const validationSchema = generateYupSchema<SNIPPETBODY>();

function toCamelCase(inputString: string): string {
	return inputString.replace(/[-_](.)/g, (_, match) => match.toUpperCase());
}
