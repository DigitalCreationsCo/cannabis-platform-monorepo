datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

generator client {
  provider          = "prisma-client-js"
  binaryTargets     = ["native", "linux-musl", "debian-openssl-1.1.x"]
}

model Account {
  id                 String  @id @default(cuid()) @unique
  userId             String?
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String? 
  oauth_token        String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt      DateTime         @db.DateTime()
  updatedAt      DateTime         @db.DateTime()

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @unique
  sessionHandle String   @unique
  email        String
  username     String
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([userId])
  @@index([sessionHandle])
}

model User {
  id            String    @id @default(cuid()) @unique
  firstName          String
  lastName String
  username String @unique
  email         String  @unique

  emailVerified     Boolean @default(false)
  isLegalAge        Boolean?
  isSignUpComplete  Boolean @default(false)
  termsAccepted     Boolean @default(false)
  idVerified        Boolean @default(false)
  scannedDOB        DateTime?
  idFrontImage      String?
  idBackImage       String?
  
  profilePicture    ImageUser?
  address Address[]
  dialCode String
  phone String @unique
  accounts      Account[]
  sessions      Session[]
  reviews Review[]
  memberships Membership[]
  orders Order[]
  driver Driver?

  purchases Purchase[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
  @@index([email])
  @@unique([id, email])
  @@index([phone])
}

model Driver {
  id String @id @default(cuid()) @unique
  email String @unique
  user User @relation(fields: [id, email], references: [id, email], onDelete:Restrict, onUpdate: Cascade)
  
  orders Order[]
  driverSession DriverSession?

  routes Route[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([id, email])
}

// this driverSession is used in mongodb,
// the prisma record is not kept congruent, this model is here for schema reference.
model DriverSession {
  // id references the driver

  id String @id @default(cuid()) @unique
  driver Driver @relation(fields: [id], references: [id])
  
  // current location of the driver

  // currentCoordinates String @unique
  // coordinates Coordinates @relation(fields: [coordinateDriverId], references: [driverId])

  isOnline Boolean @default(false)
  isActiveDelivery Boolean @default(false)
  
  routeId String? @unique
  // route Route? @relation(fields: [routeId], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
  @@index([routeId])
}

model Route {
  driverId String
  driver Driver @relation(fields: [driverId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  orderId String @unique
  order Order  @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([driverId])
  @@index([orderId])
}

model Vendor {
  id            String    @id @default(cuid()) @unique
  name          String
  publicName    String
  organizations Organization[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
}

model Address {
  id      String    @id @default(cuid()) @unique
  street1 String
  street2 String?
  city String
  state String
  zipcode Int
  country String
  countryCode String?
  coordinateId String?
  coordinates Coordinates? @relation(fields: [coordinateId], references: [id], onUpdate: SetNull, onDelete: SetNull)
  user User[]
  organization Organization? @relation("organizationAddress")
  orders Order[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
  @@index([coordinateId])
}

model ImageOrganization {
  id            String    @id @default(cuid()) @unique
  location String         @db.LongText
  organizationId String 
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blurhash String?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([organizationId])
}

model ImageProduct {
  id String @id @default(cuid()) @unique
  location String @db.LongText
  variantId String
  variant ProductVariant @relation("images", fields: [variantId], references: [id])
  blurhash String?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([variantId])
}

model ImageUser {
  id String @id @default(cuid()) @unique
  location String @db.LongText
  userId String @unique
  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  blurhash String?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([userId])
}

model ImageVendor {
  id String @id @default(cuid()) @unique
  location String @db.LongText
  // vendor Vendor?
  blurhash String?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
}

model Coordinates {
  id String @id @default(cuid()) @unique
  latitude Float
  longitude Float
  radius Float?
  addresses Address[]
  // driverSession DriverSession?
  // driverId String? @unique
  // routes Route[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Membership {
  id String @id @default(cuid()) @unique
  role MembershipRole
  organizationId String
  organizations Organization[]
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  @@index([userId])
  @@unique([id, organizationId])
}

model Order {
  id            String    @id @default(cuid()) @unique
  subtotal Int
  total Int
  taxFactor Float
  taxAmount   Int
  orderStatus OrderStatus @default(Pending)
  items ProductVariant[]

  purchaseId String? @unique
  purchase Purchase? @relation(fields: [purchaseId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  addressId String
  destinationAddress Address @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  customerId String
  customer User @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id],  onDelete: Cascade, onUpdate: Cascade)
  
  driverId String?
  driver Driver? @relation(fields: [driverId], references: [id],  onDelete: SetNull, onUpdate: SetNull)

  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  isDriverAssigned Boolean @default(false)
  driverAssignedAt DateTime?
  
  isProductPickedUp Boolean @default(false)
  productPickedUpAt DateTime?
  
  isDeliveredOrder Boolean @default(false)
  deliveredAt    DateTime?

  isCustomerReceivedOrder Boolean @default(false)
  customerReceivedOrderAt DateTime?

  isCompleted Boolean @default(false)
  completedAt DateTime?
  
  
  routeId String? @unique
  route Route?
  // metadataId     String @unique
  // metadata       OrderMetaData?


  @@index([purchaseId])
  @@index([addressId])
  @@index([customerId])
  @@index([driverId])
  @@index([organizationId])
}

enum OrderStatus {
  Pending
  Processing
  OnDelivery
  Delivered
  Cancelled
}

enum PaymentStatus {
  Pending
  Paid
  Failed
}

model Purchase {
  id            String    @id @default(cuid()) @unique
  paymentStatus PaymentStatus @default(Pending)
  gateway       String  @default("stripe")
  type          String  @default("card")
  amount        Float
  token         String
  customerId    String?
  customer      User? @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  orderId       String
  order         Order?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([orderId])
  @@index([customerId])
}

enum MembershipRole {
  OWNER @map("1")
  ADMIN @map("2")
  MEMBER @map("3")
}

enum CurrencyName {
  USD
}

enum Unit {
  g
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model Organization {
  id            String    @id @default(cuid()) @unique
  name          String
  stripeAccountId String? @unique
  stripeOnboardingComplete Boolean @default(false)
  addressId     String @unique
  address Address @relation("organizationAddress", fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dialCode String
  phone String @unique
  images ImageOrganization[]
  memberships Membership[]
  products Product[]
  vendorId String
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Restrict, onUpdate:  Restrict)
  scheduleId String @unique
  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  termsAccepted Boolean @default(false)
  subdomainId String
  subdomain SubDomain @relation(fields: [subdomainId], references: [id])
  siteSetting SiteSetting?
  orders Order[]
  categoryList CategoryList?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
  @@index([vendorId])
  @@index([subdomainId])
}

// days is integer of numbers from 6-0, 0 is Sunday, 6 is Saturday, representing the days of the week the dispensary is open
// 0 cannot be first digit, because of javscript octal literals parsing
model Schedule {
  id String @id @default(cuid()) @unique
  organization Organization?
  days Int
  openAt Int?
  closeAt Int?
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
}

model Product {
  id            String    @id @default(cuid()) @unique
  name          String
  description         String?
  features String?
  variants ProductVariant[]
  categories Category[]
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  reviews Review[]
  rating Float
  tags String?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
  @@index([organizationId])
  @@unique([id, rating])
}

model ProductVariant {
  id            String    @id @default(cuid()) @unique
  name          String
  sku           Float?
  order Order[]
  organizationId String
  organizationName String
  productId     String
  product       Product @relation(fields: [productId, rating], references: [id, rating], onDelete: NoAction, onUpdate: NoAction)
  rating        Float
  unit Unit @default(g)
  size Float
  quantity Int
  basePrice Int
  discount Int
  isDiscount Boolean
  salePrice Int
  currency CurrencyName
  stock Int
  images ImageProduct[] @relation("images")

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
  @@index([productId])
  @@index([productId, rating])
}

model Category {
    id             String @id @default(cuid()) @unique
    name           String
    slug           String
    icon           String
    products       Product[]
    categoryLists  ProductCategories[]

    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt

    @@index([name])
}

model ProductCategories {
  categoryListId String
  categoryList CategoryList @relation(fields: [categoryListId], references: [id])
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])

  @@id([categoryListId, categoryId])
  @@index([categoryListId])
  @@index([categoryId])
}

model CategoryList {
    id             String    @id @default(cuid()) @unique
    categories     ProductCategories[]
    organizationId String @unique
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
}

model ServiceList {
  id             String    @id @default(cuid()) @unique
  name           String
  slug           String @unique
  services       Service[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([slug])
}

model Service {
  id            String    @id @default(cuid()) @unique
  title String
  subtitle String?
  slug String @unique
  icon String
  serviceLists ServiceList[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([title])
  @@index([slug])
}

model Review {
  id            String    @id @default(cuid()) @unique
  rating Int
  comment String? @db.Text
  productId String @unique
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id])

createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([userId])
  @@index([productId])
}

model SiteSetting {
  id            String    @id @default(cuid()) @unique
  description    String? @db.Text
  title          String
  bannerText     String? @db.Text
  organizationId String @unique
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
}

model SubDomain {
  id String @id @default(cuid()) @unique
  organization Organization[]
  isValid Boolean @default(true) // This boolean is always true, doesn't serve any purpose yet

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
}
