generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POOLING_DATABASE_URL")
  directUrl         = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String   @id @unique @default(cuid())
  userId             String?
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String   @id @unique @default(cuid())
  sessionHandle String   @unique
  email         String
  username      String
  expires       DateTime
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionHandle])
}

model Compliance {
  id               String       @id @unique @default(cuid())
  state            USStateAbbreviated       @unique
  license          LicenseGuidelines? @relation("LicenseGuidelines")
  transport        TransportGuidelines? @relation("TransportGuidelines")
  sale             SaleGuidelines? @relation("SaleGuidelines")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model LicenseGuidelines {
  state            USStateAbbreviated          @unique
  compliance       Compliance @relation("LicenseGuidelines", fields: [state], references: [state], onDelete: Cascade, onUpdate: Cascade)
  licenseType      LicenseType[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TransportGuidelines {
  state            USStateAbbreviated          @unique
  compliance       Compliance @relation("TransportGuidelines", fields: [state], references: [state], onDelete: Cascade, onUpdate: Cascade)
  transportWeightLimit      Float
  transportStartTime        Int
  transportEndTime          Int
  transportLockedStorage    Boolean
  transportManifest         Boolean
  transportStaff            Int
  medicalDelivery           Boolean
  recreationalDelivery      Boolean

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SaleGuidelines {
  state            USStateAbbreviated          @unique
  compliance       Compliance @relation("SaleGuidelines", fields: [state], references: [state], onDelete: Cascade, onUpdate: Cascade)
  medicalSales     Boolean
  recreationalSales Boolean
  ageLimit         Int
  thcLimit         Int
  weightLimit      Float

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum LicenseType {
  dispensary
  delivery
}

enum USState {
    ALABAMA
    ALASKA
    ARIZONA
    ARKANSAS
    CALIFORNIA
    COLORADO
    CONNECTICUT
    DELAWARE
    FLORIDA
    GEORGIA
    HAWAII
    IDAHO
    ILLINOIS
    INDIANA
    IOWA
    KANSAS
    KENTUCKY
    LOUISIANA
    MAINE
    MARYLAND
    MASSACHUSETTS
    MICHIGAN
    MINNESOTA
    MISSISSIPPI
    MISSOURI
    MONTANA
    NEBRASKA
    NEVADA
    NEW_HAMPSHIRE
    NEW_JERSEY
    NEW_MEXICO
    NEW_YORK
    NORTH_CAROLINA
    NORTH_DAKOTA
    OHIO
    OKLAHOMA
    OREGON
    PENNSYLVANIA
    RHODE_ISLAND
    SOUTH_CAROLINA
    SOUTH_DAKOTA
    TENNESSEE
    TEXAS
    UTAH
    VERMONT
    VIRGINIA
    WASHINGTON
    WEST_VIRGINIA
    WISCONSIN
    WYOMING
}

enum USStateAbbreviated {
  AL
	AK
	AZ
	AR
	CA
	CO
	CT
	DE
	FL
	GA
	HI
	ID
	IL
	IN
	IA
	KS
	KY
	LA
	ME
	MD
	MA
	MI
	MN
	MS
	MO
	MT
	NE
	NV
	NH
	NJ
	NM
	NY
	NC
	ND
	OH
	OK
	OR
	PA
	RI
	SC
	SD
	TN
	TX
	UT
	VT
	VA
	WA
	WV
	WI
	WY
}

enum Country {
  United_States @map("United States")
  Canada
}

enum CountryCode {
  US
  CN
}

model User {
  id               String       @id @unique @default(cuid())
  firstName        String
  lastName         String
  username         String       @unique
  email            String       @unique
  emailVerified    Boolean      @default(false)
  isLegalAge       Boolean?
  isSignUpComplete Boolean      @default(false)
  termsAccepted    Boolean      @default(false)
  idVerified       Boolean      @default(false)
  scannedDOB       DateTime?
  idFrontImage     String?
  idBackImage      String?
  dialCode         String
  phone            String       @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  accounts         Account[]
  driver           Driver?
  profilePicture   ImageUser?
  memberships      Membership[]
  orders           Order[]
  reviews          Review[]
  sessions         Session[]
  address          Address[]    @relation("AddressToUser")

  @@index([id])
  @@index([email])
  @@index([phone])
}

model Driver {
  id            String         @id @default(cuid())
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [id], references: [id])
  licenseNumber String?
  vehicle       Vehicle[]
  driverSession DriverSession?
  orders        Order[]
  routes        Route[]

  @@index([id])
  @@index([email])
}

model Vehicle {
  id            String         @id @unique @default(cuid())
  make          String
  model         String
  year          Int
  licensePlateNumber String
  driverId      String
  driver        Driver         @relation(fields: [driverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model DriverSession {
  id               String   @id @unique @default(cuid())
  isOnline         Boolean  @default(false)
  isActiveDelivery Boolean  @default(false)
  routeId          String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  driver           Driver   @relation(fields: [id], references: [id])

  @@index([id])
  @@index([routeId])
}

model Route {
  driverId String
  orderId  String @unique
  driver   Driver @relation(fields: [driverId], references: [id], onDelete: NoAction)
  order    Order  @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@index([driverId])
  @@index([orderId])
}

model Vendor {
  id            String         @id @unique @default(cuid())
  name          String         @unique
  publicName    String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  organizations Organization[]

  @@unique([id, name])
  @@index([id])
  @@index([name])
  @@index([publicName])
}

model Address {
  id           String        @id @unique @default(cuid())
  street1      String
  street2      String?
  city         String
  state        USStateAbbreviated? @default(MD)
  zipcode      Int
  country      Country      @default(United_States)
  countryCode  CountryCode? @default(US)
  coordinateId String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  coordinates  Coordinates?  @relation(fields: [coordinateId], references: [id], onDelete: Cascade, onUpdate: SetNull)
  orders       Order[]
  organization Organization?
  user         User[]        @relation("AddressToUser")

  @@index([id])
}

// model UserAddress {
//   user       User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   userId     String
//   address    Address @relation(fields: [addressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   addressId  String

//   @@id([userId, addressId])
// }

model ImageOrganization {
  id             String       @id @unique @default(cuid())
  location       String
  organizationId String
  blurhash       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model ImageProduct {
  id        String         @id @unique @default(cuid())
  location  String
  variantId String
  blurhash  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  variant   ProductVariant @relation("images", fields: [variantId], references: [id])

  @@index([variantId])
}

model ImageUser {
  id        String   @id @unique @default(cuid())
  location  String
  userId    String   @unique
  blurhash  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ImageVendor {
  id        String   @id @unique @default(cuid())
  location  String
  blurhash  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model ImageArticle {
  id        String   @id @unique @default(cuid())
  location  String
  articleId String   @unique
  blurhash  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
}

model Coordinates {
  id        String    @id @unique @default(cuid())
  latitude  Float
  longitude Float
  radius    Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
}

model Membership {
  id             String         @id @unique @default(cuid())
  role           MembershipRole
  organizationId String
  userId         String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizations  Organization[] @relation("MembershipToOrganization")

  @@unique([id, organizationId])
  @@index([userId])
}

model Order {
  id                      String           @id @unique @default(cuid())
  type                    OrderType        @default(delivery)
  items                   ProductVariant[] @relation("OrderToProductVariant")

  subtotal                Int
  taxFactor               Float
  taxAmount               Int
  deliveryFee             Int              @default(0)
  mileageFee              Int              @default(0)
  platformFee             Int              @default(0)
  total                   Int

  distance                Float            @default(0)
  deliveryDeadline        DateTime

  orderStatus             OrderStatus      @default(Pending)
  customerId              String
  customer                User             @relation(fields: [customerId], references: [id], onDelete: NoAction)
  addressId               String
  destinationAddress      Address          @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  organization            Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId          String

  driver                  Driver?          @relation(fields: [driverId], references: [id])
  driverId                String?
  isDriverAssigned        Boolean          @default(false)
  driverAssignedAt        DateTime?

  isProductPickedUp       Boolean          @default(false)
  productPickedUpAt       DateTime?

  isDeliveredOrder        Boolean          @default(false)
  deliveredAt             DateTime?

  isCustomerReceivedOrder Boolean          @default(false)
  customerReceivedOrderAt DateTime?

  isCompleted             Boolean          @default(false)
  completedAt             DateTime?
  duration                Int?
  isLateDelivery          Boolean?

  purchaseId              String?          @unique
  purchase                Purchase?
  routeId                 String?          @unique
  route                   Route?

  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt

  @@index([addressId])
  @@index([customerId])
  @@index([driverId])
  @@index([organizationId])
}

enum OrderType {
  delivery
  pickup
}

model Purchase {
  id            String        @id @unique @default(cuid())
  paymentStatus PaymentStatus @default(Pending)
  gateway       String        @default("stripe")
  type          String        @default("card")
  amount        Float
  token         String
  orderId       String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Organization {
  id                       String              @id @unique @default(cuid())
  name                     String              @unique
  stripeAccountId          String?             @unique
  stripeOnboardingComplete Boolean             @default(false)
  addressId                String              @unique
  dialCode                 String
  phone                    String?
  termsAccepted            Boolean             @default(false)
  subdomainId              String
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  showInMarketPlace        Boolean             @default(true)
  categoryList             CategoryList?
  images                   ImageOrganization[]
  orders                   Order[]
  address                  Address             @relation(fields: [addressId], references: [id], onDelete: Cascade)
  schedule                 Schedule[]
  subdomain                SubDomain           @relation(fields: [subdomainId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products                 Product[]
  siteSetting              SiteSetting?
  memberships              Membership[]        @relation("MembershipToOrganization")
  subscribedForDelivery    Boolean             @default(false)
  subscribedForPickup      Boolean             @default(false)

  vendor                   Vendor?             @relation(fields: [vendorId, vendorName], references: [id, name])
  vendorId                 String?
  vendorName               String?
  
  ecommerceUrl             String?
  pos                      POS                 @default(none)
  inventory                Inventory           @default(none)

  metrcLicenseNumber       String?
  metrcUserKey             String?
  dutchieKey               String?
  weedmapsKey              String?
  blazeKey                 String?

  @@index([id])
  @@index([name])
  @@index([vendorId])
  @@index([subdomainId])
}

enum POS {
  none
  dutchie
  weedmaps
  blaze
}

enum Inventory {
  none
  dutchie
  weedmaps
  blaze
  metrc
}

model Schedule {
  id              String        @id @unique @default(cuid())
  days            Int?
  day             Day?          @default(Monday)
  openAt          Int           @default(900)
  closeAt         Int           @default(2000)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  organizationId  String?
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id])
  @@index([organizationId])
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model Product {
  id             String           @id @unique @default(cuid())
  name           String
  description    String?
  features       String?
  organizationId String
  rating         Float
  tags           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variants       ProductVariant[]
  reviews        Review?
  categories     Category[]       @relation("CategoryToProduct")

  @@index([id])
  @@index([organizationId])
}

model ProductVariant {
  id               String         @id @unique @default(cuid())
  name             String
  sku              Float?
  organizationId   String
  organizationName String
  productId        String
  rating           Float
  unit             Unit           @default(g)
  size             Float
  quantity         Int
  basePrice        Int
  discount         Int
  isDiscount       Boolean        @default(false)
  salePrice        Int
  currency         CurrencyName   @default(USD)
  stock            Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  images           ImageProduct[] @relation("images")
  product          Product        @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order            Order[]        @relation("OrderToProductVariant")

  @@index([id])
  @@index([productId])
}

model Category {
  id            String              @id @unique @default(cuid())
  name          String
  slug          String
  icon          String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  categoryLists ProductCategories[]
  products      Product[]           @relation("CategoryToProduct")

  @@index([name])
}

model ProductCategories {
  categoryListId String
  categoryId     String
  category       Category     @relation(fields: [categoryId], references: [id])
  categoryList   CategoryList @relation(fields: [categoryListId], references: [id])

  @@id([categoryListId, categoryId])
  @@index([categoryListId])
  @@index([categoryId])
}

model CategoryList {
  id             String              @id @unique @default(cuid())
  organizationId String              @unique
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  categories     ProductCategories[]
}

model ServiceList {
  id        String    @id @unique @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[] @relation("ServiceToServiceList")

  @@index([slug])
}

model Service {
  id           String        @id @unique @default(cuid())
  title        String
  subtitle     String?
  slug         String        @unique
  icon         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  serviceLists ServiceList[] @relation("ServiceToServiceList")

  @@index([title])
  @@index([slug])
}

model Review {
  id        String   @id @unique @default(cuid())
  rating    Float
  comment   String?
  productId String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([productId])
}

model SiteSetting {
  id             String       @id @unique @default(cuid())
  title          String       @default("Your Shop Title")
  bannerText     String?      @default("Welcome")
  description    String?      @default("We've launched our shop on Gras! Browse our goods.")

  primaryColor    String?     @default("#14a33d")
  secondaryColor  String?     @default("#13622a")
  tertiaryColor   String?     @default("#fff2da")
  textColor       String?     @default("#a8a8a8")
  backgroundColor String?     @default("#ffffff")

  organizationId String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([id])
}

model SubDomain {
  id           String         @id @unique @default(cuid())
  isValid      Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  organization Organization[]

  @@index([id])
}

model Article {
  id          String        @id @unique @default(cuid())
  name        String
  title       String
  description String
  href        String
  tag         ArticleTag?
  content     String
  author      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  image       ImageArticle?

  @@index([id])
  @@index([title])
}

model all_auth_recipe_users {
  user_id     String @id @db.Char(36)
  recipe_id   String @db.VarChar(128)
  time_joined BigInt

  @@index([time_joined(sort: Desc), user_id(sort: Desc)], map: "all_auth_recipe_users_pagination_index")
}

model emailpassword_pswd_reset_tokens {
  user_id             String              @db.Char(36)
  token               String              @unique @db.VarChar(128)
  token_expiry        BigInt
  emailpassword_users emailpassword_users @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, token])
  @@index([token_expiry], map: "emailpassword_password_reset_token_expiry_index")
}

model emailpassword_users {
  user_id                         String                            @id @db.Char(36)
  email                           String                            @unique @db.VarChar(256)
  password_hash                   String                            @db.VarChar(128)
  time_joined                     BigInt
  emailpassword_pswd_reset_tokens emailpassword_pswd_reset_tokens[]
}

model emailverification_tokens {
  user_id      String @db.VarChar(128)
  email        String @db.VarChar(256)
  token        String @unique @db.VarChar(128)
  token_expiry BigInt

  @@id([user_id, email, token])
  @@index([token_expiry], map: "emailverification_tokens_index")
}

model emailverification_verified_emails {
  user_id String @db.VarChar(128)
  email   String @db.VarChar(256)

  @@id([user_id, email])
}

model jwt_signing_keys {
  key_id     String  @id @db.VarChar(255)
  key_string String
  algorithm  String  @db.VarChar(10)
  created_at BigInt?
}

model key_value {
  name            String  @id @db.VarChar(128)
  value           String?
  created_at_time BigInt?
}

model passwordless_codes {
  code_id              String               @id @db.Char(36)
  device_id_hash       String               @db.Char(44)
  link_code_hash       String               @unique @db.Char(44)
  created_at           BigInt
  passwordless_devices passwordless_devices @relation(fields: [device_id_hash], references: [device_id_hash], onDelete: Cascade)

  @@index([created_at], map: "passwordless_codes_created_at_index")
  @@index([device_id_hash], map: "passwordless_codes_device_id_hash_index")
}

model passwordless_devices {
  device_id_hash     String               @id @db.Char(44)
  email              String?              @db.VarChar(256)
  phone_number       String?              @db.VarChar(256)
  link_code_salt     String               @db.Char(44)
  failed_attempts    Int
  passwordless_codes passwordless_codes[]

  @@index([email], map: "passwordless_devices_email_index")
  @@index([phone_number], map: "passwordless_devices_phone_number_index")
}

model passwordless_users {
  user_id      String  @id @db.Char(36)
  email        String? @unique @db.VarChar(256)
  phone_number String? @unique @db.VarChar(256)
  time_joined  BigInt
}

model role_permissions {
  role       String @db.VarChar(255)
  permission String @db.VarChar(255)
  roles      roles  @relation(fields: [role], references: [role], onDelete: Cascade, onUpdate: NoAction)

  @@id([role, permission])
  @@index([permission], map: "role_permissions_permission_index")
}

model roles {
  role             String             @id @db.VarChar(255)
  role_permissions role_permissions[]
  user_roles       user_roles[]
}

model session_access_token_signing_keys {
  created_at_time BigInt  @id
  value           String?
}

model session_info {
  session_handle       String  @id @db.VarChar(255)
  user_id              String  @db.VarChar(128)
  refresh_token_hash_2 String  @db.VarChar(128)
  session_data         String?
  expires_at           BigInt
  created_at_time      BigInt
  jwt_user_payload     String?
}

model thirdparty_users {
  third_party_id      String @db.VarChar(28)
  third_party_user_id String @db.VarChar(128)
  user_id             String @unique @db.Char(36)
  email               String @db.VarChar(256)
  time_joined         BigInt

  @@id([third_party_id, third_party_user_id])
}

model user_metadata {
  user_id       String @id @db.VarChar(128)
  user_metadata String
}

model user_roles {
  user_id String @db.VarChar(128)
  role    String @db.VarChar(255)
  roles   roles  @relation(fields: [role], references: [role], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role])
  @@index([role], map: "user_roles_role_index")
}

enum OrderStatus {
  Pending
  Processing
  ReadyForPickup
  ReadyForDelivery
  OnDelivery
  Delivered
  Cancelled
  Completed
}

enum PaymentStatus {
  Pending
  Paid
  Failed
}

enum MembershipRole {
  OWNER  @map("1")
  ADMIN  @map("2")
  MEMBER @map("3")
}

enum CurrencyName {
  USD
}

enum Unit {
  g
}

enum ArticleTag {
  dispensaries
  drivers
  events
  entertainment
  culture
  art
  sports
  science
  politics
  business
  health
  food
  gras
}
