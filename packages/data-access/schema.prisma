datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
  provider          = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String? 
  oauth_token        String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt      DateTime         @db.DateTime()
  updatedAt      DateTime         @db.DateTime()

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  firstName          String
  lastName String
  username String? @unique
  email         String   @unique
  emailVerified Boolean @default(false)
  hashedPassword String?
  dialCode String?
  phone String?
  address Address[]
  termsAccepted Boolean @default(false)
  imageUser     ImageUser[]
  accounts      Account[]
  sessions      Session[]
  reviews Review[]
  memberships Membership[]
  orders Order[]
  driver Driver?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
  @@index([email])
}

model Driver {
  id String @id
  user User @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders Order[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Vendor {
  id            String    @id @default(cuid())
  name          String
  publicName    String
  organizations Organization[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
}

model Address {
  id            String    @id @default(cuid())
street1 String
street2 String?
city String
state String
zipcode String
country String
countryCode String?
coordinateId String?
coordinates Coordinates? @relation(fields: [coordinateId], references: [id])
userId String?
user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
organizationId String? @unique
organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

@@index([userId])
@@index([organizationId])
}

model ImageOrganization {
  id            String    @id @default(cuid())
  location String
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  blurhash String?

createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
  @@index([organizationId])
}

model ImageProduct {
  id String @id @default(cuid())
  location String
  productId String
  product Product @relation(fields: [productId], references: [id])
  blurhash String?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
  @@index([productId])
}

model ImageUser {
  id String @id @default(cuid())
  location String
  userId String
  user User @relation(fields: [userId], references: [id])
  blurhash String?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
}

model ImageVendor {
  id String @id @default(cuid())
  location String
  // vendor Vendor?
  blurhash String?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
}

model Coordinates {
  id String @id @default(cuid())
  latitude Float
  longitude Float
  radius Float?
  addresses Address[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Membership {
  id String @id @default(cuid())
  role MembershipRole
  organizations organizationMembership[]
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: SetNull)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Order {
  id            String    @id @default(cuid())
  total Int
  status OrderStatus @default(Pending)
  items Product[]
  customerId String
  customer User @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  driverId String?
  driver Driver? @relation(fields: [driverId], references: [id],  onDelete: SetNull, onUpdate: SetNull)
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id],  onDelete: Cascade, onUpdate: Cascade)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

enum OrderStatus {
  Pending
  Processing
  Delivered
  Cancelled
}

model Payment {
  id            String    @id @default(cuid())

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

enum MembershipRole {
  MEMBER
  ADMIN
  OWNER
}

enum Currency {
  USD
}

enum Unit {
  g
}
model Organization {
  id            String    @id @default(cuid())
  name          String
  address Address?
  email         String   @unique
  emailVerified Boolean @default(false)
  dialCode String?
  phone String?
  images ImageOrganization[]
  memberships organizationMembership[]
  products Product[]
  vendorId String
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Restrict, onUpdate:  Restrict)
  subdomainId String
  termsAccepted Boolean @default(false)
  subdomain SubDomain @relation(fields: [subdomainId], references: [subdomain])
  siteSetting SiteSetting?
  orders Order[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
  @@index([vendorId])
}

model organizationMembership {
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  membershipId String
  membership Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@id([organizationId, membershipId])
}
model Product {
  id            String    @id @default(cuid())
  name          String
  description         String?
  features String?
  categories Category[]
  unit Unit @default(g)
  size Float
  basePrice Int
  currency Currency
  discount Int
  quantity Int
  stock Int
  images ImageProduct[]
  organizationName String
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  orders Order[]
  reviews Review[]
  rating Float?
  tags String?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([id])
  @@index([organizationId,organizationName])
}

model Category {
    id            String    @id @default(cuid())
    name String
    slug String @unique
    icon String
    products Product[]
    categoryLists CategoryList[]

    createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

    @@index([name])
    @@index([slug])
}

model CategoryList {
  id            String    @id @default(cuid())
    name String
    slug String @unique
    categories Category[]

    createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

    @@index([name])
    @@index([slug])
}

model ServiceList {
  id            String    @id @default(cuid())
  name String
  slug String @unique
  services Service[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([slug])
}

model Service {
  id            String    @id @default(cuid())
  title String
  subtitle String?
  slug String @unique
  icon String
  serviceLists ServiceList[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([title])
  @@index([slug])
}

model Review {
  id            String    @id @default(cuid())
  rating Int
  comment String? @db.Text
  productId String @unique
  product Product @relation(fields: [productId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])

createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([userId])
  @@index([productId])
}

model SiteSetting {
    id String @unique
    organizationId String @unique
    description String? @db.Text
    title String
    bannerText String? @db.Text
    organization Organization @relation(fields: [organizationId], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

    @@index([id, organizationId])
    @@unique([id, organizationId])
}

model SubDomain {
  subdomain String @unique
  organization Organization[]
  isValid Boolean // This boolean should be true if a cronjob monitors that the domain points to our app address

createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([subdomain])
}
