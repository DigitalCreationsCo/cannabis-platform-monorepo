To share node_module dependencies across different Docker images, you can follow these steps:

Create a separate Docker image for your Node.js project, which includes the node_module dependencies. This image will serve as the base image for other images that require the same dependencies.

Build the base Node.js image by creating a Dockerfile in your project's root directory. The Dockerfile should include the necessary commands to install the dependencies and copy your project code. Here's an example:

Dockerfile
Copy code
# Base image
FROM node:14

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy project files
COPY . .

# Start the application
CMD [ "npm", "start" ]
Build the Docker image using the following command:

shell
Copy code
docker build -t base-node-image .
This command will build the Docker image based on the Dockerfile and tag it as base-node-image.

Now, in other Docker images that require the same node_module dependencies, you can use the base-node-image as the base image. Create a separate Dockerfile for each image, and use the FROM instruction to reference the base-node-image you built earlier.

Dockerfile
Copy code
# Dockerfile for another image
FROM base-node-image

# Copy additional files specific to this image
COPY . .

# Additional instructions
...
Build the Docker image for each additional image, using the respective Dockerfile for that image.

shell
Copy code
docker build -t additional-image .
This command will build the Docker image based on the additional Dockerfile and tag it as additional-image.

By using a shared base image that includes the node_module dependencies, you ensure that the dependencies are installed only once, and subsequent images built on top of the base image can reuse those dependencies. This approach saves time and disk space while ensuring consistency across different Docker images.